// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  phone         String?
  password      String?   @db.Text
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  organizationId String?
  organization  Organization? @relation(fields: [organizationId], references: [id])
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  mission     String   @default("Not specified")
  focusAreas  String[]
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  users       User[]
  invitations Invitation[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitation {
  id            String           @id @default(cuid())
  email         String
  status        InvitationStatus @default(PENDING)
  organization  Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([email, organizationId])
}
